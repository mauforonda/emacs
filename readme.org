#+TITLE: Emacs
#+STARTUP: content
#+TODO: inactive 
#+PROPERTY: header-args :results silent

[[./screen.png]]

* Package locations

Sources

#+BEGIN_SRC emacs-lisp 
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
#+END_SRC

Custom local path

#+BEGIN_SRC emacs-lisp 
(add-to-list 'load-path "/home/m/.emacs.d/personal/packages/")
#+END_SRC


* Edit Emacs

Assuming this file is located outside =~/.emacs.d= for backup purposes, copy this file back when it gets saved.

#+BEGIN_SRC emacs-lisp 
(defun m/onsave_emacs()
  
  (let (
        (m/pwd "/home/m/auricio/boot/emacs/emacs.org") ;; editing path
        (m/emacsd "/home/m/.emacs.d/")) ;; load path
    
    (when (string= buffer-file-name m/pwd)
      (copy-file m/pwd m/emacsd t)
      (message (concat "Copied to " m/emacsd)))))

(add-hook 'after-save-hook 'm/onsave_emacs)
#+END_SRC

Whenever I save my personal theme, which I keep in an org-mode document, tangle and recompile it, copy it back to a place recognized by =custom-theme-load-path=, and load back the theme into existance.

#+BEGIN_SRC emacs-lisp 
(add-to-list 'custom-theme-load-path "/home/m/.emacs.d/personal/theme/")

(defun m/onsave_theme()
  
  
  (let (
        (m/themepath "/home/m/.emacs.d/personal/theme/") ;; editing path
        (m/themename "personal") ;; theme name
        (m/themenameload 'personal) ;; argument to load-theme
        (m/themeload "/home/m/.emacs.d/personal/theme/") ;; load path
        )
    
    (when (string= buffer-file-name (concat m/themepath m/themename "-theme.org"))
      (org-babel-tangle-file
       (concat m/themepath m/themename "-theme.org")
       (concat m/themepath m/themename "-theme.el"))
      (byte-recompile-directory m/themepath)
      (load-theme m/themenameload t)
      (message "Reloaded Theme"))
    
    ))

(add-hook 'after-save-hook 'm/onsave_theme)

#+END_SRC


* Basic look

Load theme

#+BEGIN_SRC emacs-lisp 
  (load-theme 'personal t)
#+END_SRC

Remove basic visual elements 

#+BEGIN_SRC emacs-lisp 
(setq inhibit-splash-screen t) ;; No intro
(tool-bar-mode -1) ;; No toolbar
(menu-bar-mode -99) ;; No menubar
(setq visible-bell 1) ;; No bells
(set-scroll-bar-mode nil) ;; No vertical scrollbar
(setq horizontal-scroll-bar-mode nil) ;; No horizontal scrollbar
(setq-default line-number-mode nil)
(setq-default mode-line-format " ") ;; The simplest modeline
(setq helm-mode-line-string nil)
#+END_SRC 

Display words like you would expect in a modern editor

#+BEGIN_SRC emacs-lisp 
;; UTF-8
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)
;; Wrap words
(global-visual-line-mode t)
;; Highlight the cursor line
(global-hl-line-mode 1)
(setq-default cursor-type 'box)
;; Line spacing
(setq-default line-spacing 3)
;; No cursor in non-selected windows
(setq-default cursor-in-non-selected-windows nil)
#+END_SRC

Have a huge fringe for visual comfort

#+BEGIN_SRC emacs-lisp 
(fringe-mode '(40 . 40))
#+END_SRC

Some visual elements are specific to writing, programming or temporary buffers, so I classify these.

#+BEGIN_SRC emacs-lisp 
(setq 
 m/writing_modes
 '(
   org-mode-hook
   pollen-mode-hook
   )
 m/programming_modes
 '(
   js-mode-hook
   python-mode-hook
   html-mode-hook
   c-mode-hook
   css-mode-hook
   ruby-mode-hook
   sh-mode-hook
   kotlin-mode-hook
   racket-mode-hook
   conf-mode-hook
   fundamental-mode-hook
   emacs-lisp-mode-hook
	 smali-mode-hook
   )
 m/temporary_modes
 '(
   lisp-interaction-mode-hook
   Man-mode-hook
   ))

#+END_SRC

Monospaced fonts only for programming modes

#+BEGIN_SRC emacs-lisp 
(defun m/monospaced-font ()
  (interactive)
  (setq buffer-face-mode-face '(:family "Hack"))
  (buffer-face-mode))

(dolist (m/mode m/programming_modes)
  (add-hook m/mode 'm/monospaced-font))
#+END_SRC

A header for every type of buffer

#+BEGIN_SRC emacs-lisp  
(defun m/orgmodeheader ()
  (if (string-match-p ".*\\.org\-." (buffer-name))
      (nth 0 (split-string (nth 1 (split-string (buffer-name) ".org-")) "-"))
    (nth 0 (split-string (file-name-nondirectory (buffer-file-name)) "\\."))))

;; Display filename without extension or org-mode title or header name (in an indirect buffer)
(defun m/headerclean ()
  (setq header-line-format
        '("     "
	  (:eval (all-the-icons-icon-for-mode 'org-mode :face 'all-the-icons-purple-alt))
	  "   "
	  (:eval (m/orgmodeheader))
	  )))

;; Display filename
(defun m/headerfilename()
  (setq header-line-format
	'("     "
	  (:eval (all-the-icons-icon-for-file (file-name-nondirectory buffer-file-name) :face 'all-the-icons-purple-alt))
	  "   "
	  (:eval (file-name-nondirectory buffer-file-name))
	  )))

;; Display buffer name
(defun m/headerbuffername ()
  (interactive)
  (setq header-line-format
	'("     "
	  (:eval (buffer-name))
	  )))
;; Apply header to modes
(defun m/header-apply (modes header)
  (dolist (m/mode modes)
    (add-hook m/mode header)))
;; Apply
(m/header-apply m/writing_modes 'm/headerclean)
(m/header-apply m/programming_modes 'm/headerfilename)
(m/header-apply m/temporary_modes 'm/headerbuffername)

#+END_SRC

Line numbers only for programming buffers

#+BEGIN_SRC emacs-lisp 
(setq linum-format "  %d ")
;; Disable line numbers
(defun m/islinum(modes linumstate)
  (cond
   ((= linumstate 0)
    (dolist (m/mode modes)
      (add-hook m/mode (lambda ()
                         (linum-mode 0)))))
   ((= linumstate 1)
    (dolist (m/mode modes)
      (add-hook m/mode (lambda ()
                         (linum-mode 1)))))))

;; Apply
(m/islinum m/writing_modes 0)
(m/islinum m/temporary_modes 0)
(m/islinum m/programming_modes 1)

#+END_SRC

blink to find the cursor fast

#+BEGIN_SRC emacs-lisp 
;; (beacon-mode t)
;; (setq beacon-color "#ffd8fe")
;; (setq beacon-blink-when-focused  t)
;; (setq beacon-blink-when-window-scrolls nil)
;; (setq beacon-blink-when-point-moves nil)
;; (setq beacon-blink-when-window-changes nil)
;; (setq beacon-blink-when-buffer-changes nil)
;; (setq beacon-blink-when-point-moves-vertically 5)
#+END_SRC

* Edit buffers

Write over the selected range

#+BEGIN_SRC emacs-lisp 
(delete-selection-mode 1)

#+END_SRC

Move cursor up and down

#+BEGIN_SRC emacs-lisp 
;; (global-set-key (kbd "<up>") 'previous-logical-line)
;; (global-set-key (kbd "<down>") 'next-logical-line)
(global-set-key (kbd "<up>") 'previous-line)
(global-set-key (kbd "<down>") 'next-line)
(setq-default line-move-visual nil)
(global-set-key (kbd "<end>") 'end-of-line)
(global-set-key (kbd "<home>") 'beginning-of-line)

(global-set-key (kbd "<s-next>") 'end-of-line)
(global-set-key (kbd "<s-prior>") 'beginning-of-line)

#+END_SRC

Scroll up and down

#+BEGIN_SRC emacs-lisp 
;; Mouse scrolling
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't)
(setq scroll-step 1)
;; Keyboard scrolling
(defun m/scrolldown ()
  (interactive)
  (scroll-up 1))
(defun m/scrollup ()
  (interactive)
  (scroll-down 1))
;; Keys to scroll
(global-set-key [(next)] 'm/scrolldown)
(global-set-key [(prior)]   'm/scrollup)

#+END_SRC

Undo

#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-z") 'undo)

#+END_SRC

Select all 

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-a")  'mark-whole-buffer)
  (define-key org-mode-map [(control a)] 'mark-whole-buffer)

#+END_SRC

Search

#+BEGIN_SRC emacs-lisp 
;; (with-eval-after-load 'helm-regexp
;;   (setq helm-source-occur
;;         (helm-make-source "Occur" 'helm-source-multi-occur :follow 1)))
;; (define-key global-map (kbd "C-s") 'helm-occur)

(define-key global-map (kbd "C-s") 'swiper)

#+END_SRC

Avoid automatic backup files

#+BEGIN_SRC emacs-lisp 
(setq make-backup-files nil)
(setq auto-save-default nil)
(setq create-lockfiles nil)

#+END_SRC

Revert buffer when changed on disk

#+BEGIN_SRC emacs-lisp 
(global-auto-revert-mode 1)

#+END_SRC

Spell checking

#+BEGIN_SRC emacs-lisp 
(setq-default flyspell-issue-message-flag nil)
(ispell-change-dictionary "espanol")
(defun m/flyspell-remember-word ()
  (interactive)
  (let ((current-location (point))
	(word (flyspell-get-word)))
    (when (consp word)    
      (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))
(with-eval-after-load 'flyspell
  (define-key flyspell-mode-map (kbd "C-M-u") 'm/flyspell-remember-word))

#+END_SRC

Default width
#+BEGIN_SRC emacs-lisp 
(setq default-tab-width 2)
(setq css-indent-offset 2)
(setq indent-tabs-mode nil)
;; (setq-default adaptive-wrap-extra-indent 0)
;; (add-hook 'visual-line-mode-hook #'adaptive-wrap-prefix-mode)
#+END_SRC

Helpers

#+BEGIN_SRC emacs-lisp 

;; normalize text copied from a pdf

(defun m/pdfcleanup ()
	"Replace newlines copied from PDFs"
  (interactive)
  (save-restriction
    (narrow-to-region (point) (mark))
    (goto-char (point-min))
    (while (search-forward "\n" nil t) (replace-match " " nil t))
		(goto-char (point-min))
    (while (search-forward "​" nil t) (replace-match " " nil t))
    (goto-char (point-min))
    (while (re-search-forward "\s\s*" nil t) (replace-match " " nil t))
		)
	)
#+END_SRC

Smartparens

#+BEGIN_SRC emacs-lisp 
(require 'smartparens-config)
(smartparens-global-mode)
(sp-with-modes 'org-mode
	(sp-local-pair "$" "$"))
;; (setq m/smartparens_modes
;; 			'(org-mode-hook pollen-mode-hook python-mode-hook inferior-python-mode-hook emacs-lisp-mode-hook js-mode-hook))
;; (dolist (mode m/programming_modes)
;;   (add-hook mode #'smartparens-mode))
#+END_SRC


* Window operations

Resize this window

#+BEGIN_SRC emacs-lisp 
(defhydra m/windowresize (:hint nil)
  "← ↑ → ↓"
  ("<left>" (shrink-window-horizontally 10))
  ("<right>" (enlarge-window-horizontally 10))
  ("<up>" (enlarge-window 10))
  ("<down>" (shrink-window 10))
  ("q" nil)
  )
(global-set-key (kbd "M-r") 'm/windowresize/body)

#+END_SRC

Kill this buffer. Unlike =kill-this-buffer=, it works when multiple frames are open

#+BEGIN_SRC emacs-lisp 
(defun kill-buffer-and-its-windows (buffer)
  "Kill BUFFER and delete its windows.  Default is `current-buffer'.
BUFFER may be either a buffer or its name (a string)."
  ;; (interactive (list (read-buffer "Kill buffer: " (current-buffer) 'existing)))
  (interactive (list (current-buffer)))
  (setq buffer (get-buffer buffer))
  ;; (setq buffer  (get-buffer buffer))
  (if (buffer-live-p buffer)            ; Kill live buffer only.
      (let ((wins  (get-buffer-window-list buffer nil t))) ; On all frames.
        (when (and (buffer-modified-p buffer)
                   (fboundp '1on1-flash-ding-minibuffer-frame))
          (1on1-flash-ding-minibuffer-frame t)) ; Defined in `oneonone.el'.
        (when (kill-buffer buffer)      ; Only delete windows if buffer killed.
          (dolist (win  wins)           ; (User might keep buffer if modified.)
            (when (window-live-p win)
              ;; Ignore error, in particular,
              ;; "Attempt to delete the sole visible or iconified frame".
              (condition-case nil (delete-window win) (error nil))))))
    (when (interactive-p)
      (error "Cannot kill buffer.  Not a live buffer: `%s'" buffer))))

(defun m/kill-buffer ()
  (interactive)
  (kill-buffer (current-buffer)))

;; (global-set-key (kbd "C-x k") 'kill-buffer-and-its-windows)
(global-set-key (kbd "C-x k") 'm/kill-buffer)
;; (substitute-key-definition 'kill-buffer 'kill-buffer-and-its-windows global-map)
#+END_SRC


* Navigate buffers

Move focus to other displayed windows

#+BEGIN_SRC emacs-lisp 
;; (eval-after-load "org"
;;   '(progn
;;      (define-key org-mode-map (kbd "<M-S-left>") nil)
;;      (define-key org-mode-map (kbd "<M-S-right>") nil)
;;      (define-key org-mode-map (kbd "<M-left>") nil)
;;      (define-key org-mode-map (kbd "<M-right>") nil)))

(global-set-key (kbd "M-s-<left>")  'windmove-left)
(global-set-key (kbd "M-s-<right>") 'windmove-right)
(global-set-key (kbd "M-s-<up>")    'windmove-up)
(global-set-key (kbd "M-s-<down>")  'windmove-down)
#+END_SRC

Visual indicator for focused window

#+begin_src emacs-lisp
(require 'highlight-focus)
#+end_src

Buffers I don't want to see in navigation

#+BEGIN_SRC emacs-lisp 
(setq m/spambuffers '(
		      "^ "
		      "^\\*Buffer List\\*$"
		      "^\\*Backtrace\\*$"
		      "^\\*WoMan-Log\\*$"
		      "^\\*Compile-Log\\*$"
		      "^\\*tramp/.+\\*$"
		      "^\\*evil-marks\\*$"
		      "^\\*evil-registers\\*$"
		      "^\\*Shell Command Output\\*$"
		      "^\\*helm[- ].+\\*$"
		      "^\\*magit\\(-\\w+\\)?: .+$"
		      "^\\*irc\\..+\\*$"
		      "\\*helm-mode"
		      "\\*Echo Area"
		      "\\*Minibuf"
		      "\\ *code-conversion-work\\*"
		      "org-src-fontification.+"
		      "\\*helm-mode.+"
		      "\\*Org-Babel Error"))
#+END_SRC

Cycle through work buffers in order of recency

#+BEGIN_SRC emacs-lisp 
;; Set swbuff
(require 'swbuff)
(setq swbuff-recent-buffers-first t)
(setq swbuff-separator " · ")
;; Exclude these buffers
(setq swbuff-exclude-buffer-regexps m/spambuffers)
;; Keys to cycle
(global-set-key [(C-next)] 'swbuff-switch-to-next-buffer)
(global-set-key [(C-prior)]   'swbuff-switch-to-previous-buffer)

;; (global-set-key [(C-next)] 'bs-cycle-next)
;; (global-set-key [(C-prior)]   'bs-cycle-previous)

;; bs-configurations

#+END_SRC

#+BEGIN_SRC emacs-lisp 
;; (global-set-key [(C-next)] 'switch-to-prev-buffer)
;; (global-set-key [(C-prior)] 'switch-to-next-buffer)

#+END_SRC

Go straight to a desired buffer

#+BEGIN_SRC emacs-lisp :results silent 
;; Set helm
(require 'helm)
(require 'helm-config)
(helm-mode 1)
(setq helm-full-frame nil)
(setq helm-split-window-in-side-p t)
(setq helm-split-window-default-side 'below)
(setq helm-display-buffer-default-width 50)
;; Avoid buffer details
(setq helm-buffer-details-flag 'nil)
;; Exclude these buffers
(setq helm-boring-buffer-regexp-list m/spambuffers)

(setq helm-mini-default-sources '(
                                  helm-source-buffers-list
                                  helm-source-files-in-current-dir
                                  helm-source-file-name-history
                                  ;; helm-source-recentf
                                  ;; helm-source-buffer-not-found
                                  ))

;; Keys to navigate
(global-set-key (kbd "M-SPC") 'helm-mini)

#+END_SRC

Go straight to a set of bookmarks

#+BEGIN_SRC emacs-lisp 
;; (global-set-key (kbd "C-M-SPC") 'helm-filtered-bookmarks)

#+END_SRC

Open new buffer

#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(setq helm-ff-kill-or-find-buffer-fname-fn 'ignore)

#+END_SRC


* Manage sessions

Save buffer list

#+BEGIN_SRC emacs-lisp 
(desktop-save-mode 1)

#+END_SRC

Save cursor state

#+BEGIN_SRC emacs-lisp 
(require 'saveplace)
(setq-default save-place t)

#+END_SRC


* Discover functions

Search all interactive functions in a context

#+BEGIN_SRC emacs-lisp 
(define-key global-map (kbd "<print>") 'helm-M-x)
#+END_SRC


* Search the web

Google selection by =C-c / RET RET=, opens on Firefox

#+BEGIN_SRC  emacs-lisp 
(google-this-mode 1)

#+END_SRC

Search Wikipedia for a selection by =M-s M-w=, opens on eww

#+BEGIN_SRC emacs-lisp 
(setq eww-search-prefix "https://en.m.wikipedia.org/w/index.php?search=")

#+END_SRC

google translate

#+BEGIN_SRC emacs-lisp 
(setq google-translate-default-source-language "de")
(setq google-translate-default-target-language "en")
#+END_SRC

* Contextual buffers

Changes applied to buffers that only display for a short moment.

#+BEGIN_SRC emacs-lisp 
;; (defun m/color-echo ()
;; 	(dolist (buf '(" *Echo Area 0*" " *Echo Area 1*"))
;; 		(with-current-buffer (get-buffer buf)
;; 			(make-local-variable 'face-remapping-alist)
;; 			(add-to-list 'face-remapping-alist '(default (:background "#f4f4f9" :foreground "#a4a5a5" :box (:line-width 2 :color "#f4f4f9"))))))

(setq helm-display-header-line nil)

(defun m/contextual-changes ()
	"Visual changes for contextual buffers."
	(face-remap-add-relative 'default '(:background "#fbfafc" :foreground "#706e73" :box (:line-width 2 :color "#fbfafc")))
	(face-remap-add-relative 'header-line '(:background "#fbfafc" :foreground "#706e73" :box (:line-width 7 :color "#fbfafc")))
	(setq left-margin-width 5)
	(setq left-fringe-width 0)
	(setq right-fringe-width 0))

(defun m/color-helm ()
	"Apply contextual visual changes to Helm buffers."
  (with-helm-buffer	(m/contextual-changes)))
		
(defun m/context-buffers ()
	"Apply visual changes to contextual buffers."
	(add-hook 'help-mode-hook 'm/contextual-changes)
	(add-hook 'dired-mode-hook 'm/contextual-changes)
	(add-hook 'helm-after-initialize-hook 'm/color-helm))

(m/context-buffers)
#+END_SRC

* Nerdtab

#+BEGIN_SRC emacs-lisp
;; (require 'nerdtab)

;; (setq nerdtab-regex-blacklist m/spambuffers)
;; (setq nerdtab-tab-width 5)
;; (setq window-min-width 5)

;; (setq nerdtab-special-tabs '("*Messages*"
;; 															 "*scratch*"
;; 															 "*Faces*"
;; 															 "*Help*"
;; 															 "emacs.org"
;; 															 "personal-theme.org"))

;; (defun m/nerdtab-visual ()
;; 	"Visual changes for contextual buffers."
;; 	(with-current-buffer " *nerdtab*"
;; 		(set-window-fringes nil 0 0 nil)
;; 		(face-remap-add-relative 'default '(:background "#ededf1" :foreground "#f2f2f2"))
;; 		))

;; (add-hook 'nerdtab-major-mode-hook 'm/nerdtab-visual)

;; (defun nerdtab-cycle-next ()
;; 	(interactive)
;; 	(let ((tabs-length (cl-list-length nerdtab--tab-list))
;; 				(current nerdtab--current))
;; 		(if (= (+ 1 current) tabs-length)
;; 				(nerdtab-jump 0)
;; 			(nerdtab-jump (+ current 1)))
;; 		))

;; (defun nerdtab-cycle-prev ()
;; 	(interactive)
;; 	(let ((tabs-length (cl-list-length nerdtab--tab-list))
;; 				(current nerdtab--current))
;; 		(if (= 0 current)
;; 				(nerdtab-jump (- tabs-length 1))
;; 			(nerdtab-jump (- current 1)))
;; 		))

;; (global-set-key [(C-next)] 'nerdtab-cycle-next)
;; (global-set-key [(C-prior)] 'nerdtab-cycle-prev)

;; (defun nerdtab-move-next ()
;; 	(interactive)
;; 	(nerdtab-move-to (+ nerdtab--current 2)))

;; (defun nerdtab-move-prev ()
;; 	(interactive)
;; 	(nerdtab-move-to (- nerdtab--current 1)))

;; (global-set-key [(C-S-next)] 'nerdtab-move-next)
;; (global-set-key [(C-S-prior)] 'nerdtab-move-prev)

;; (global-set-key (kbd "C-x C-SPC") 'nerdtab-mode)

;; (add-hook 'emacs-startup-hook #'nerdtab-mode)
#+END_SRC

* Org mode

** To Do

#+BEGIN_SRC emacs-lisp 
(setq-default org-todo-keywords` ((sequence "☖" "☗")))
#+END_SRC

** Headings

Display heading trees like modern outlines

#+BEGIN_SRC emacs-lisp 
;; Indent headings
(setq org-startup-indented t)
;; Only show one bullet per heading
;; (setq-default org-hide-leading-stars nil)
;; Show pretty bullets
(setq-default org-indent-mode-turns-on-hiding-stars nil)
(setq-default org-hide-leading-stars t)
(add-hook 'org-mode-hook (lambda ()
                           (interactive)
                           (setq org-hide-leading-stars t)
                           (require 'org-bullets)
                           (setq org-bullets-compose-leading-stars "⋅")
                           (org-bullets-mode 1)
                           (setq org-bullets-face-name 'org-tag)
                           (setq org-bullets-bullet-list '( "•"))))
;; Don't display any special symbol if the heading is collapsed
(setq org-ellipsis " ")
;; Separate collapsed headings by one line
(setq org-cycle-separator-lines 1)
;; Apply heading background to the whole line
;; (setq org-fontify-whole-heading-line nil)

#+END_SRC


Cycle through headings

#+BEGIN_SRC emacs-lisp 
(define-key org-mode-map [(control shift down)]  'outline-next-visible-heading)
(define-key org-mode-map [(control shift up)]  'outline-previous-visible-heading)
#+END_SRC

Move straight to any heading or link to it

#+BEGIN_SRC emacs-lisp 
;; Link to a heading
(defun m/orgheadinglink (marker)
  (with-current-buffer (marker-buffer marker)
    (let (
          (heading-name
           (save-excursion
             (goto-char
              (marker-position marker))
             (nth 4 (org-heading-components))))
          (file-name
           (buffer-file-name)))
      (with-helm-current-buffer
        (org-insert-link
         file-name
         (concat "file:" file-name "::*" heading-name)
         "❇"))
      )))

;; Set actions for helm headings list
(setq helm-org-headings-actions '(
                                  ("Go to" . helm-org-goto-marker) ;; default go to
                                  ("Insert link" . m/orgheadinglink) ;; available link to
                                  ))

;; Headings in the list are displayed along with their path 
(setq helm-org-format-outline-path t)
;; Key to list
(define-key org-mode-map (kbd "C-/") 'helm-org-in-buffer-headings)
#+END_SRC

Make a buffer from current heading to focus

#+BEGIN_SRC emacs-lisp 
(setq org-indirect-buffer-display 'current-window)
(defun m/orgfocus ()
  (interactive)
  (let ((current-prefix-arg 4))
    (call-interactively #'org-tree-to-indirect-buffer)))
(define-key org-mode-map (kbd "<insert>") 'm/orgfocus)

#+END_SRC

** Source blocks

Apply a different font between text and blocks

#+BEGIN_SRC emacs-lisp 
(defun m/variableapply(modes)
  (dolist (m/mode modes)
    (add-hook m/mode (lambda ()
		       (interactive)
		       (variable-pitch-mode)))))

(m/variableapply m/writing_modes)
(setq-default org-fontify-quote-and-verse-blocks t)

#+END_SRC

Syntax highlight and don't unnecessarily indent source blocks

#+BEGIN_SRC emacs-lisp 
(setq org-src-fontify-natively t)
(setq-default org-edit-src-content-indentation 0)
#+END_SRC

Display pretty block begin and end lines

#+BEGIN_SRC emacs-lisp 
(setq-default prettify-symbols-alist '(
				       ("#+TITLE:". "")
				       (":PROPERTIES:" . ":")
				       ("#+BEGIN_SRC" . "λ") 
				       ("#+END_SRC" . "⋱")
				       ("#+begin_src" . "λ") 
				       ("#+end_src" . "⋱")
				       ("#+RESULTS:" . "»")
				       (":END:" . "⋱")
				       (":RESULTS:" . "⋰")
				       ("#+NAME:" . "")
				       ("#+BEGIN_EXAMPLE" . "~")
				       ("#+begin_example"  . "~")
				       ("#+END_EXAMPLE" . "~")
				       ("#+end_example" . "~")
				       ("#+BEGIN_VERBATIM" . "")
				       ("#+END_VERBATIM" . "")
				       ("#+BEGIN_VERSE" . "")
				       ("#+END_VERSE" . "")
				       ("#+BEGIN_QUOTE" . "𐄚")
				       ("#+END_QUOTE" . "𐄚")
				       ("#+TBLFM:" . "∫")
				       ))
(add-hook 'org-mode-hook (lambda ()
			   (interactive)
			   (prettify-symbols-mode)))

#+END_SRC

Setup languages and headers for Babel

#+BEGIN_SRC emacs-lisp 
;; Languages
(org-babel-do-load-languages
 'org-babel-load-languages '(
                             (emacs-lisp . t)
                             (shell . t)
                             (python . t)
														 (js . t)
                             ))
;; Default headers
;; Shell
(setq org-babel-default-header-args:sh '((:results . "verbatim pp replace")))
;; Use bash
(setq explicit-shell-file-name "/bin/bash")
(setq-default shell-file-name "bash")
(setq explicit-bash-args '("-c" "export EMACS=; stty echo; bash"))

;; Python
(setq org-babel-python-command "python3")
(setq org-babel-default-header-args:python '((:results . "verbatim pp replace output")))
;; js
(setq org-babel-default-header-args:js '((:results . "verbatim pp replace")))

#+END_SRC

Create blocks by completion, edit source blocks in the same window, evaluate them without confirmation
Block completion works by pressing =<= the template key and =TAB= 

#+BEGIN_SRC emacs-lisp 
;; Completion templates
(require 'org-tempo)
(setq org-structure-template-alist '(
				     ("s" . "src")
				     ))

;; (setq org-structure-template-alist '(
;;                                      ("n" "#+NAME: ?")
;;                                      ("t" "#+TBLFM: ?")
;;                                      ("s" "#+BEGIN_SRC ? \n?\n#+END_SRC")
;;                                      ("e" "#+BEGIN_EXAMPLE \n?\n#+END_EXAMPLE")
;;                                      ("q" "#+BEGIN_QUOTE \n?\n#+END_QUOTE")
;;                                      ("v" "#+BEGIN_VERSE \n?\n#+END_VERSE")
;;                                      ("V" "#+BEGIN_VERBATIM \n?\n#+END_VERBATIM")
;;                                      ("c" "#+BEGIN_CENTER \n?\n#+END_CENTER")
;;                                      ("l" "#+BEGIN_EXPORT latex \n?\n#+END_EXPORT")
;;                                      ("L" "#+LaTeX: ")
;;                                      ("h" "#+BEGIN_EXPORT html \n?\n#+END_EXPORT")
;;                                      ("H" "#+HTML: ")
;;                                      ("a" "#+BEGIN_EXPORT ascii \n?\n#+END_EXPORT")
;;                                      ("A" "#+ASCII: ")
;;                                      ("i" "#+INDEX: ?")
;;                                      ("I" "#+INCLUDE: %file ?")
                                     ;; ))
;; Edit block in the same window
(setq org-src-window-setup 'current-window)
;; Evaluate without confirmation
(setq org-confirm-babel-evaluate nil)
;; Set header arguments inside property drawers and have these affect all nested blocks
(setq org-use-property-inheritance t)

#+END_SRC


** Prose

Simple visual and navigation tweaks

#+BEGIN_SRC emacs-lisp 
(setq org-hide-emphasis-markers t) ;; Hide markers
(setq org-support-shift-select 'always) ;; Select with shift
(setq org-return-follows-link t) ;; Follow links with Enter
(setq browse-url-browser-function 'browse-url-xdg-open) ;; Open web links in Firefox
(setq org-tags-column 0) ;; Tag positions

#+END_SRC

Italize or make bold easily

#+BEGIN_SRC emacs-lisp 
(defun orgbold ()
  (interactive)
  (org-emphasize ?*))

(defun orgitalic ()
  (interactive)
  (org-emphasize ?/))

(define-key org-mode-map [(shift return)] 'orgbold)


#+END_SRC

Easy to read text in example blocks

#+BEGIN_SRC emacs-lisp 
(defun m/read-easy-hook (modes)
  (dolist (m/mode modes)
    (add-hook m/mode (lambda ()
		       (setq visual-line-mode t)))))

  (m/read-easy-hook m/writing_modes)
  (m/read-easy-hook '(fundamental-mode-hook))
#+END_SRC

** org-capture

To receive text from Firefox I listen to messages through Emacs server and org-protocol, and process them through org-capture.

Listen to messages

#+BEGIN_SRC emacs-lisp 
(server-start)
(require 'org-protocol)

#+END_SRC

Put text in an ordered list inside a predefined document and heading, including its source, don't bother with editing or confirming afterwards

#+BEGIN_SRC emacs-lisp 
;; (defun m/capturewebclip ()
;;   (let (
;;         (m/clips "/home/m/auricio/write/clips/web.org")
;;         )
;;     (with-current-buffer (find-file-noselect m/clips)
;;       (setq fragments
;;             (org-map-entries
;;              (lambda ()
;;                (nth 4 (org-heading-components)))
;;              "+fragment"
;;              'file)))
;;     (if (= (length fragments) 0)
;;         (setq this-fragment "1")
;;       (setq this-fragment (number-to-string (+ 1 (string-to-number (car (last fragments)))))))
;;     (message this-fragment)
;;     ))

;; (setq org-capture-templates
;;       '(
				
;; 				;; ("n"
;;         ;;  "New"
;;         ;;  entry
;;         ;;  (file+headline
;;         ;;   "/home/m/Dropbox/proyectos/lab/webclips.org"
;;         ;;   "clips")
;;         ;;  "\n\n\n* %:description\n[[%:link][⦿]]\n\n%i"
;;         ;;  :immediate-finish t :jump-to-captured nil :empty-lines 1)
				
;; 				;; ("a"
;;         ;;  "Append"
;;         ;;  plain
;;         ;;  (file
;;         ;;   "/home/m/Dropbox/proyectos/lab/webclips.org")
;;         ;;  "\n\n%i"
;;         ;;  :immediate-finish t :jump-to-captured nil)

;; 				("n"
;; 				 "New note journal entry"
;; 				 plain
;; 				 (function m/journal-write-plain)
;; 				 "* ☖ \n\n[[%:link][%:description]]\n\n#+BEGIN_QUOTE \n%i\n#+END_QUOTE \n\n"
;; 				 :immediate-finish t :jump-to-captured nil :empty-lines 1)

;; 				("a"
;; 				 "New append note journal entry"
;; 				 plain
;; 				 (function m/journal-write-plain)
;; 				 "\n\n#+BEGIN_QUOTE \n%i\n#+END_QUOTE \n\n"
;; 				 :immediate-finish t :jump-to-captured nil :empty-lines 1)


;; 				("k"
;; 				 "New book journal entry"
;; 				 plain
;; 				 (function m/journal-capture-book)
;; 				 "\n\n#+BEGIN_QUOTE \n%i\n#+END_QUOTE \n\n"
;; 				 :immediate-finish t :jump-to-captured 1 :empty-lines 1)
				
;; 				;; ("b"
;; 				;;        "Bookmark"
;; 				;;        entry
;; 				;;        (file
;; 				;;         "/home/m/Dropbox/proyectos/lab/bookmarks.org")
;; 				;;        "\n\n\n* %:description\n%:link\n"
;; 				;;        :immediate-finish t :jump-to-captured nil :empty-lines 1)

;; 				("b"
;; 				 "Bookmark journal entry"
;; 				 plain
;; 				 (function m/journal-write-plain)
;; 				 "* ☖ \n\n[[%:link][%:description]]\n\n"
;; 				 :immediate-finish t :jump-to-captured nil :empty-lines 1)

;; 				("m"
;; 				 "Manual journal entry"
;; 				 plain
;; 				 (function m/journal-write-plain)
;; 				 "%i\n"
;; 				 :immediate-finish t :jump-to-captured nil :empty-lines 0)

;; 				("l"
;;          "Long"
;;          entry
;;          (file+headline
;;           "/home/m/auricio/write/clips/web.org"
;;           "Fragments")
;;          "\n* %(m/capturewebclip) :fragment:\n %i\n%:link"
;;          :immediate-finish t :jump-to-captured nil)
				
;; 				("s"
;; 				 "Short"
;; 				 plain
;; 				 (file
;; 					"/home/m/auricio/write/clips/diary.org")
;; 				 "\n%i [[%:link][*]]"
;; 				 :immediate-finish t :jump-to-captured nil)
				
;; 				))

#+END_SRC

I can't extend this process to taking notes from books. Books are usually distributed as PDFs and:
1. I couldn't find a PDF reader I can have the Emacs server interact with
2. Text from PDFs usually requires post-processing
Therefore I decided to circunvent org-capture and just copy text with minimal automatic post-processing inside an ordered list in the current buffer.

#+BEGIN_SRC emacs-lisp 
;; Insert clipboard text inside the last heading in an ordered list, replace all line endings with spaces
(defun m/capturepdf ()
  (interactive)
  (setq fragments
        (org-map-entries
         (lambda ()
           (nth 4 (org-heading-components)))
         "+fragment" 'tree))
  (if (= (length fragments) 0)
      (setq last-fragment "1")
    (setq last-fragment
          (number-to-string
           (+ 1 
              (string-to-number
               (car (last fragments)))))))
  (org-insert-heading-after-current)
  (insert last-fragment)
  (insert
   "\n"
   (replace-regexp-in-string
    "\n" " "
    (current-kill 0)))
  (org-set-tags-to "fragment")
  )
;; Key
(define-key org-mode-map (kbd "M-v") 'm/capturepdf)

#+END_SRC


** Find information across multiple org documents

Define what documents are interesting

#+BEGIN_SRC emacs-lisp 
;; (setq m/interesting
			
;;       (list
;;        "/home/m/auricio/write/clips/web.org"
;;        "/home/m/auricio/write/clips/1.org"
;;        "/home/m/auricio/write/writing/datos.org"
;;        "/home/m/auricio/write/writing/procosi.org"
;;        "/home/m/auricio/write/writing/internet.org"
;;        "/home/m/auricio/write/writing/socialchoice.org"
;;        "/home/m/auricio/write/writing/android.org"
;;        "/home/m/auricio/write/read/notes/Hofstadter_Godel-Escher-Bach.org"
;;        "/home/m/auricio/write/read/notes/Osterhammel-The_Transformation_of_the_World.org"
;;        "/home/m/auricio/write/read/notes/Pinker_Enlightenment_Now.org"
;;        "/home/m/auricio/write/read/notes/read.org"))

#+END_SRC

Full text search 

#+BEGIN_SRC emacs-lisp 
;; Setup org-rifle
(require 'helm-org-rifle)
;; What files to search
(defun m/riflesearch()
  (interactive)
  (helm-org-rifle-files m/interesting))
;; Key to search
(global-set-key (kbd "C-x /") 'm/riflesearch)

#+END_SRC

Search only headings

#+BEGIN_SRC emacs-lisp 
;; (setq org-agenda-files m/interesting)
;; (global-set-key (kbd "M-/") 'helm-org-agenda-files-headings)

#+END_SRC

** Store and use citations
:PROPERTIES:
:header-args: :tangle no
:END:

Disabled because I don't use it and it runs timers constantly

Where to store citations

#+BEGIN_SRC emacs-lisp 
(require 'org-ref)
(setq bibtex-completion-bibliography "~/auricio/write/writing/bib/ref.bib"
      bibtex-completion-library-path "~/auricio/write/writing/bib/ref.bib"
      bibtex-completion-notes-path "~/auricio/write/writing/bib/helm-bibtex-notes"
      reftex-default-bibliography '("~/auricio/write/writing/bib/ref.bib")
      org-ref-bibliography-notes "~/auricio/write/writing/bib/notes.org"
      org-ref-default-bibliography '("~/auricio/write/writing/bib/ref.bib")
      org-ref-pdf-directory "~/auricio/write/read/bib/")

#+END_SRC

Store citations with =C-c C-b= inside the Bibtex document
Copy references to citations with =helm-bibtex=

#+BEGIN_SRC emacs-lisp 
;; Modify helm-source-bibtex so that copying references is the default option
(setq helm-source-bibtex
      (helm-build-sync-source "BibTeX entries"
	:header-name (lambda (name)
		       (format "%s%s: " name (if helm-bibtex-local-bib " (local)" "")))
	:candidates 'helm-bibtex-candidates
	:filtered-candidate-transformer 'helm-bibtex-candidates-formatter
	:action (helm-make-actions
		 "Insert reference"           'helm-bibtex-insert-reference
		 "Open PDF, URL or DOI"       'helm-bibtex-open-any
		 "Open URL or DOI in browser" 'helm-bibtex-open-url-or-doi
		 "Insert citation"            'helm-bibtex-insert-citation
		 "Insert BibTeX key"          'helm-bibtex-insert-key
		 "Insert BibTeX entry"        'helm-bibtex-insert-bibtex
		 "Attach PDF to email"        'helm-bibtex-add-PDF-attachment
		 "Edit notes"                 'helm-bibtex-edit-notes
		 "Show entry"                 'helm-bibtex-show-entry
		 "Add PDF to library"         'helm-bibtex-add-pdf-to-library)))

#+END_SRC

Modify =bibtex-completion-insert-reference= so that references are not broken into multiple lines

#+BEGIN_SRC emacs-lisp 
(defun bibtex-completion-insert-reference (keys)
  "Insert a reference for each selected entry."
  (let* ((refs (--map
		(concat "\n- " (bibtex-completion-apa-format-reference it))
                keys)))
    (insert (replace-regexp-in-string "\n" "" (s-join "" refs)))))

#+END_SRC


** Journal

Book I am reading now

#+BEGIN_SRC emacs-lisp 
;; ;; (setq m/journalbook "Bostrom-TheVulnerableWorldHypothesis")
;; (defvar m/journalbook)
;; (add-to-list 'desktop-globals-to-save 'm/journalbook)

;; (defun m/journal-new-book ()
;; 	(interactive)
;; 	(setq m/journalbook (read-string "A filepath for the book:"))
;; 	)

;; (defun m/journal-capture-book ()
;; 	(interactive)
;; 	(if (equal m/journalbook "")
;; 			(m/journal-write-plain)
;; 		(m/journal-write-book))
;; 	)
#+END_SRC

#+BEGIN_SRC emacs-lisp 
;; ;; (require 'org-journal)
;; ;; (setq org-journal-dir "~/auricio/lab/journal/")

;; ;; insert time
;; (defun m/time ()
;; 	"Insert time"
;; 	(interactive)
;; 	(insert
;; 	 (concat 
;; 		(format-time-string "%H:%M")
;; 		"  ")
;; 	 ))

;; (defun m/journal-time ()
;; 	(format-time-string "%H:%M")
;; 	)

;; (setq m/dominiopublico-dir "~/auricio/lab/oratorio/dominiopublico/")

;; (setq m/journal-dir "~/auricio/landscape/practice/")
;; (setq m/journal-note "%Y-%m")
;; (setq m/journal-entry "%e")

;; (defun m/journal-find-note ()
;; 	(concat
;; 	 m/journal-dir
;; 	 (format-time-string m/journal-note)
;; 	 ".org"
;; 	 ))

;; (defun m/journal-find-entry ()
;; 	(format-time-string m/journal-entry))

;; (defun m/journal-create-note ()
;; 	(interactive)
;; 	(defconst journal-note (m/journal-find-note))
;; 	(unless (file-exists-p journal-note)
;; 		(write-region "" nil journal-note)))

;; (defun m/journal-create-entry ()
;; 	(interactive)
;; 	(defconst today (m/journal-find-entry))
;; 	(insert (concat "* " today)))

;; (defun m/journal-write-plain ()
;; 	(interactive)
;; 	(defconst journal-note (m/journal-find-note))
;; 	(find-file journal-note)
;; 	(goto-char (point-max))
;; )

;; (setq m/journalbookdirectory "~/auricio/lab/textos/")

;; (defun m/journal-write-book ()
;; 	(interactive)
;; 	(defconst journal-note (concat m/journalbookdirectory m/journalbook ".org"))
;; 	(find-file journal-note)
;; 	(goto-char (point-max))
;; )

;; (defun m/journal-write ()
;; 	(interactive)
;; 	(defconst journal-note (m/journal-find-note))
;; 	(defconst now (format-time-string "%H:%M"))
;; 	(find-file journal-note)
;; 	(goto-char (point-max))
;; 	(insert (concat "** " now "\n\n"))
;; 	(goto-char (point-max))
;; )

;; (global-set-key (kbd "C-x C-j") 'm/journal-write)

;; (setq m/textos-dir "~/auricio/lab/textos/")

;; (setq org-agenda-files
;; 			(append
;; 			 (directory-files m/journal-dir t ".*\.org")
;; 			 (directory-files m/dominiopublico-dir t ".*\.org")
;; 			 (directory-files m/textos-dir t ".*\.org")))

;; ;; Search journal entries
;; (defun m/journal ()
;; 	"Search journal entries"
;; 	(interactive)
;; 	(helm-do-ag "~/auricio/lab/")
;; 	)
;; (global-set-key (kbd "C-M-/") 'm/journal)
;; (setq helm-follow-mode-persistent 1)

;; ;; (global-set-key (kbd "M-/") 'org-tags-view)

;; ;; ;; (setq org-journal-file-pattern "~/auricio/write/proyectos/lab/lab/journal/^[^\.][^#][[:alnum:]]+\.org$")
;; ;; (setq org-journal-file-format "%Y%m%d.org")
;; ;; ;; (setq org-journal-date-format "%x")

;; ;; (defun org-journal-find-location ()
;; ;;   (org-journal-new-entry t)
;; ;; 	)

;; ;; (setq org-agenda-directory org-journal-dir)
;; ;; (setq org-agenda-files (directory-files (expand-file-name org-agenda-directory) t 
;; ;; "^[^\.][^#][[:alnum:]]+\.org$"))

;; ;; (setq org-journal-enable-agenda-integration t)
#+END_SRC

** Landscape

*** Current

Captures go into the heading at point. Press =C-.= to change the target heading

#+BEGIN_SRC emacs-lisp 

(defvar m/capture-file '()) ;; What file to capture into
(defvar m/capture-persist "~/.emacs.d/.capture") ;; Where m/capture-file is stored across sessions

(defun m/capture-point ()
	"Go to m/capture-file and place the cursor at the bottom"
	(interactive)
	(find-file (nth 0 m/capture-file))
	(org-goto-marker-or-bmk (org-find-exact-headline-in-buffer (nth 1 m/capture-file)))
	(outline-next-heading)
	(newline)
	(left-char)
	)

(defun m/capture-here ()
	"Select a file and heading to write captures to."
	(interactive)
	(let ((m/capture-here-file (buffer-file-name (org-base-buffer (nth 0 (org-buffer-list "files")))))
				(m/capture-here-heading (substring-no-properties (org-get-heading))))
		(setq m/capture-file (list m/capture-here-file m/capture-here-heading))
		(message (concat m/capture-here-file " --> " m/capture-here-heading))
		))

(setq org-capture-templates
			'(
				("l"
				 "Capture a link"
				 plain
				 (function m/capture-point)
				 "\n\n[[%:link][%:description]]\n\n"
				 :immediate-finish t :jump-to-captured nil :empty-lines 1)
				("q"
				 "Capture a quote"
				 plain
				 (function m/capture-point)
				 "/%:initial/"
				 :immediate-finish t :jump-to-captured nil :empty-lines 1)
				))

(global-set-key (kbd "C-.") 'm/capture-here)
#+END_SRC


Search tags, headings or fulltext inside these files.

#+BEGIN_SRC emacs-lisp 
(defun m/agendafiles ()
		(interactive)
	(setq org-agenda-files (directory-files-recursively "~/studio/" ".*\.org")))
(setq org-agenda-files (directory-files-recursively "~/studio" ".*\.org"))
(defun m/find-interesting ()
	"Find interesting stuff you've captured previously"
	(interactive)
	(defconst m/find-interesting-mode	(completing-read "Find: " '("Tags" "Headings" "Full Text")))
	(cond ((string-equal m/find-interesting-mode "Tags") (m/org-tags-view))
				((string-equal m/find-interesting-mode "Headings") (helm-org-agenda-files-headings))
				((string-equal m/find-interesting-mode "Full Text") (helm-do-ag "~/studio/" org-agenda-files))))
(global-set-key (kbd "C-M-/") 'm/find-interesting)
#+END_SRC


*** Previously
:PROPERTIES:
:header-args: :tangle no
:END:


Settings for org-capture templates. Captures can write to 
1. A /practice/ file, named after the current week number, stored at =~/auricio/landscape/practice/= and found dinamically via =m/practice-file=
2. A /product/ file, selected manually from files inside =~/auricio/landscape/product/=
A user selects which file to capture to via =m/capture-here=, an interactive function. This selection is stored at =m/capture-persist= in order to work across sessions.
Captures insert links =l= or quotes =q= and finish without editing. I expect captures to be useful  just to grab text from outside, while I give structure to notes manually. 

#+BEGIN_SRC emacs-lisp 
(defvar m/capture-file nil) ;; What file to capture into
(defvar m/capture-persist "~/.emacs.d/.capture") ;; Where m/capture-file is stored across sessions

(defun m/capture-point ()
	"Go to m/capture-file and place the cursor at the bottom"
	(interactive)
  (find-file m/capture-file)
	(goto-char (- (point-max) 1))
	)

;; Previously I had a default capture file for every week. As many of their contents ended up refiled elsewhere, these files were mostly empty. I'll try using only one file now.

;; (defun m/practice-file ()
;; 	"Select the practice file for captures."
;; 	(defconst practice-file (concat "~/auricio/landscape/practice/" (format-time-string "%W") ".org"))
;; 	(unless (file-exists-p practice-file) (write-region "" nil practice-file))
;; 	(message practice-file)
;; 	)

(defun m/practice-file ()
	"Select the practice file for captures."
	(message "~/auricio/landscape/practice/practice.org")
	)

(defun m/load-capture-persist ()
	"Read the m/capture-persist file and assign its value to m/capture-file, unless it's value is 'practice', in which case assign dynamically m/practice-file "
	(defconst m/capture-persist-content (m/read-file-content m/capture-persist))
	(if (string-equal m/capture-persist-content "practice")
			(setq m/capture-file (m/practice-file))
		(setq m/capture-file m/capture-persist-content))
	)

(defun m/read-file-content (file-path)
  "Return file-path's content."
  (with-temp-buffer
    (insert-file-contents file-path)
    (buffer-substring (point-min) (line-end-position))))

(defun m/capture-here ()
	"Select a file to write captures to."
	(interactive)
	(defconst m/capture-mode	(completing-read "Select: " '("practice" "product")))
	(message m/capture-mode)
	(if (string-equal m/capture-mode "practice")
			(and (setq m/capture-file (m/practice-file))
					 (write-region "practice" nil m/capture-persist)
					 (message "Practice"))
		(and (setq m/capture-file (read-file-name "Select:" "~/auricio/landscape/product/"))
				 (write-region m/capture-file nil m/capture-persist)
				 (message "Product"))
		))

(setq org-capture-templates
			'(
				("l"
				 "Capture a link"
				 plain
				 (function m/capture-point)
				 "\n\n[[%:link][%:description]]\n\n"
				 :immediate-finish t :jump-to-captured nil :empty-lines 1)
				("q"
				 "Capture a quote"
				 plain
				 (function m/capture-point)
				 "\n\n#+BEGIN_QUOTE \n%:initial\n#+END_QUOTE \n\n"
				 :immediate-finish t :jump-to-captured nil :empty-lines 1)
				))

(global-set-key (kbd "C-.") 'm/capture-here)
(m/load-capture-persist)
#+END_SRC

Search tags, headings or fulltext inside these files.

#+BEGIN_SRC emacs-lisp 
(defun m/agendafiles ()
		(interactive)
	(setq org-agenda-files (directory-files-recursively "~/studio/" ".*\.org")))
(setq org-agenda-files (directory-files-recursively "~/studio" ".*\.org"))
(defun m/find-interesting ()
	"Find interesting stuff you've captured previously"
	(interactive)
	(defconst m/find-interesting-mode	(completing-read "Find: " '("Tags" "Headings" "Full Text")))
	(cond ((string-equal m/find-interesting-mode "Tags") (m/org-tags-view))
				((string-equal m/find-interesting-mode "Headings") (helm-org-agenda-files-headings))
				((string-equal m/find-interesting-mode "Full Text") (helm-do-ag "~/auricio/landscape/" org-agenda-files))))
(global-set-key (kbd "C-M-/") 'm/find-interesting)
#+END_SRC

*** Some reading helpers

I create entries for papers I read or want to read. Each of these can be pointed by a DOI. I want a function that takes a DOI, borrowed from a custom =doi= property, and takes me to the article page, the sci-hub page or inserts a citation in place.

#+BEGIN_SRC emacs-lisp 
(defun m/doi ()
	(interactive)
	(let ((m/doi-value (org-entry-get nil "doi"))
				(m/doi-action (completing-read "Select: " '("Article" "Sci-Hub" "Citation"))))
		(if (string-equal m/doi-action "Article")
				(browse-url (concat "https://doi.org/" m/doi-value)))
		(if (string-equal m/doi-action "Sci-Hub")
				(browse-url (concat "http://sci-hub.tw/" m/doi-value)))
		(if (string-equal m/doi-action "Citation")
				(let ((m/doi-citation  (shell-command-to-string (concat "curl -s -LH 'Accept: text/bibliography; style=bibtex' http://dx.doi.org/" m/doi-value))))
					(insert (concat "#+BEGIN_SRC bibtex\n" m/doi-citation "\n#+END_SRC"))))
		))
#+END_SRC

** Export

Variables

#+BEGIN_SRC emacs-lisp 
(setq-default org-export-preserve-breaks t)
(setq-default org-export-with-toc nil)
(setq-default org-export-with-title nil)
(setq-default org-export-with-author nil)
(setq-default org-export-time-stamp-file nil)
(setq-default org-export-with-title nil)
(setq-default org-export-with-section-numbers nil)
(setq-default org-html-validation-link nil)
#+END_SRC

HTML head

#+NAME: charter-regular
#+BEGIN_SRC css 
src: url(data:application/x-font-woff;charset=utf-8;base64,)
#+END_SRC

#+BEGIN_SRC css :tangle org.css :noweb yes
@font-face {
  font-family: 'charterregular';
	<<charter-regular>>;
  font-weight: normal;
  font-style: normal;
}

html {
	background-color: #f9f9f9;
}

body {
	margin: 0px 120px;
	font-family: charterregular;
	background-color: #fbfbfb;
	color: #171718;
	padding: 10px 30px;
}

h1, h2 {
	padding: 10px 0px 25px 0px;
	border-bottom: 1px solid #f0f0f8;
}

p {
	margin: 7px 0px;
}

blockquote {
	font-size: 0.8rem;
	color: #8d83a5;
	background: #f9f9ff;
	padding: 5px 16px;
	border-radius: 5px;
	border: 1px solid #e8e1ff;
}

blockquote p {
	white-space: pre-wrap;
}

p + blockquote, blockquote + p {
	margin-top: 25px;
}

li {
	margin: 2px 0px;
	font-size: 0.8rem;
}

@media (max-width: 760px) {
	body {
		padding: 10px 20px;
	}

	blockquote {
		margin: 10px 15px;
	}
}
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-html-head "<meta http-equiv='Content-Type' content='text/html;charset=utf-8'/> \ 
			<meta name='viewport' content='width=device-width, initial-scale=1' /> \ 
<link rel='stylesheet' type='text/css' href='/home/m/auricio/boot/emacs/org.css'/>")
#+END_SRC

** Agenda

#+BEGIN_SRC emacs-lisp 
(setq org-agenda-tags-column 1)
(setq org-agenda-follow-indirect t)

(setq org-super-agenda-groups
			'((:name "Tareas" :tag "tarea")))

(require 'org-super-agenda)
(defun m/org-tags-view ()
	(interactive)
	(org-tags-view nil "tarea"))

	;; (let ((org-super-agenda-groups
	;;        '((:name "Tareas" :tag "tarea"))
	;;        ))
	;; 	(org-tags-view nil "tarea"))
#+END_SRC

** Personal workflow

I try to make progress on certain life projects, which are contained inside org files within a directory. Each of these projects has a purpose, status, history. I want to narrow the funcionality of Emacs to specialize in working on these projects. For this, I'll maintain an org file (index) where I'll write information about each project. To keep this file at hand, I'll turn it into a sidebar I can open at any moment. 

#+begin_src emacs-lisp
(defun m/showindex ()
  "Show the index of current projects"
  (let ((buffer (get-file-buffer "/home/m/studio/index.org")))
    (progn
    (display-buffer-in-side-window buffer '((side . left) (window-width . 0.2)))
    (set-window-dedicated-p (get-buffer-window buffer) t)
    )))

(defun m/hideindex ()
  "Hide the index of current projects"
  (let ((buffer (get-file-buffer "/home/m/studio/index.org")))
    (progn
    (delete-window (get-buffer-window buffer))
    )))

(defun m/toggleindex ()
  "Toggle the index of current projects"
  (interactive)
  (let* ((buffer (get-file-buffer "/home/m/studio/index.org"))
	(window (get-buffer-window buffer)))
    (if window
	(m/hideindex)
      (m/showindex)
      )))

(global-set-key (kbd "C-M-SPC") 'm/toggleindex)
#+end_src

* Dired


Open in current directory

#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-x C-d") 'dired-jump)
#+END_SRC

Display a simple list

#+BEGIN_SRC emacs-lisp 
(require 'dired-details)
(dired-details-install)
(setq dired-details-hidden-string "")

#+END_SRC

Sort directories first

#+BEGIN_SRC emacs-lisp 
(setq dired-listing-switches "-al --group-directories-first")

#+END_SRC

Go up and down the filesystem

#+BEGIN_SRC emacs-lisp 
;; (define-key dired-mode-map (kbd "M-<left>")
;;   (lambda ()
;;     (interactive)
;;     (find-alternate-file "..")))
;; (define-key dired-mode-map (kbd "M-<right>") 'dired-find-alternate-file)

#+END_SRC

Delete directories without confirmation

#+BEGIN_SRC emacs-lisp 
(setq dired-recursive-deletes 'always)

#+END_SRC

Default external applications

#+BEGIN_SRC emacs-lisp 
(require 'openwith)
(setq openwith-associations '(
                              ("\\.pdf\\'" "evince" (file))
                              ("\\.jpg\\'" "feh" (file))
			      ("\\.png\\'" "feh" (file))
			      ("\\.jpeg\\'" "feh" (file))
                              ("\\.djvu\\'" "evince" (file))))
(openwith-mode t)
;; Necessary to display images in org-mode if openwith is activated
(defadvice org-display-inline-images
    (around handle-openwith
            (&optional include-linked refresh beg end) activate compile)
  (if openwith-mode
      (progn
        (openwith-mode -1)
        ad-do-it
        (openwith-mode 1))
    ad-do-it))
;; Open EPUBs inside Emacs
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))

#+END_SRC

Show icons

#+BEGIN_SRC emacs-lisp 
(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)
#+END_SRC

Keys to search and go up/down the filesystem

#+BEGIN_SRC  emacs-lisp 
(defun m/dired-go-up ()
  (interactive)
  (find-alternate-file ".."))

(eval-after-load "dired" '(progn
			    (define-key dired-mode-map (kbd "/") 'dired-narrow)
			    (define-key dired-mode-map (kbd "M-<left>") 'm/dired-go-up)
			    (define-key dired-mode-map (kbd "M-<right>") 'dired-find-alternate-file)))

(define-key helm-find-files-map (kbd "M-<left>") 'helm-find-files-up-one-level)
(define-key helm-find-files-map (kbd "M-<right>") 'helm-ff-RET)
#+END_SRC


* Programming

Rainbow delimiters are convenient to locate yourself inside a nested structure, I find them useful in most modes

#+BEGIN_SRC emacs-lisp 
;; What modes
(setq m/rainbow_modes
      (append
       m/programming_modes
       '(pollen-mode-hook
         lisp-interaction-mode-hook)))
;; Apply
(defun m/rainbow (modes)
  (dolist (m/mode modes)
    (add-hook m/mode #'rainbow-delimiters-mode)))
(m/rainbow m/rainbow_modes)
#+END_SRC

Setup auto-complete

#+BEGIN_SRC emacs-lisp 
(ac-config-default)
(setq ac-auto-start nil)
(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
#+END_SRC

Search all files within a directory. Press =C-c C-f= to go directly to results under the cursor (helm-follow-mode)

#+BEGIN_SRC emacs-lisp :results silent
(require 'ag)
(global-set-key (kbd "M-.") 'helm-do-ag)
#+END_SRC

In javascript, use js2-mode with eslint if possible

#+BEGIN_SRC emacs-lisp 
;; Use js2
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
;; Clean display
(setq-default js-indent-level 2)
(setq-default js2-basic-indent 2)
(setq-default js2-basic-offset 2)
(setq-default js2-auto-indent-p t)
(setq-default js2-cleanup-whitespace t)
(setq-default js2-indent-on-enter-key t)
(setq js2-mode-show-parse-errors nil)
(setq js2-mode-show-strict-warnings nil)
;; Use eslint if found in node_modules
(defun m/js2eslint ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
(add-hook 'flycheck-mode-hook #'m/js2eslint)
;; Simple comments
(defun m/js2comments ()
  (setq comment-start "//"
        comment-end ""
        comment-style 'indent))
(add-hook 'js2-mode-hook #'m/js2comments)

#+END_SRC

python elpy

#+BEGIN_SRC emacs-lisp 
(setq-default elpy-rpc-python-command "python3")
;; (elpy-enable)
(setq-default python-shell-interpreter "python3")
#+END_SRC

* Unused
:PROPERTIES:
:header-args: :tangle no
:END:

** copy to emacs.d on save


#+BEGIN_SRC emacs-lisp :results silent
(defun i3-org-save()
  (when (string= buffer-file-name "/home/m/auricio/boot/i3/config")
    (copy-file "/home/m/auricio/boot/i3/config" "/home/m/.i3/" t)
    (message "Copied to /home/m/.i3/ directory")))
(add-hook 'after-save-hook 'i3-org-save)
#+END_SRC


** toggle dedicated windows
:PROPERTIES:
:ID:       69082d6f-2093-49bd-8890-1ac7ff14eda6
:END:

#+BEGIN_SRC emacs-lisp
  (setq pop-up-windows t)

  (defadvice pop-to-buffer (before cancel-other-window first)
    (ad-set-arg 1 nil))

  (defun toggle-window-dedicated ()
    "Toggle whether the current active window is dedicated or not"
    (interactive)
    (message
     (if (let (window (get-buffer-window (current-buffer)))
           (set-window-dedicated-p window 
                                   (not (window-dedicated-p window))))
         "Window '%s' is dedicated"
       "Window '%s' is normal")
     (current-buffer)))

  (global-set-key (kbd "s-p") 'toggle-window-dedicated)
#+END_SRC


** bash in shell-mode
:PROPERTIES:
:ID:       75c60900-d91a-4fee-839e-400044fa806d
:END:

#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name "/bin/bash")
  (setq-default shell-file-name "bash")
  (setq explicit-bash-args '("-c" "export EMACS=; stty echo; bash"))
#+END_SRC



** move across shell prompts
:PROPERTIES:
:ID:       1b45f791-115f-467f-912b-52be1553c87c
:END:

#+BEGIN_SRC emacs-lisp
  (defun shell-up()
    (interactive)
    (comint-previous-prompt 1))

  (defun shell-down()
    (interactive)
    (comint-next-prompt 1))

  (add-hook 'shell-mode-hook
            (lambda ()
              (define-key shell-mode-map (kbd "C-S-<up>") 'shell-up) 
              (define-key shell-mode-map (kbd "C-S-<down>") 'shell-down)
              ))
#+END_SRC


** reduce noise in shell
:PROPERTIES:
:ID:       d1cef454-64f9-41ff-b942-c2aaf5428663
:END:

#+BEGIN_SRC emacs-lisp
  (add-hook 'shell-mode-hook
            (lambda ()
              (setq comint-process-echoes t)
              (setq initial-scratch-message nil)
              ))
#+END_SRC


** show manpages in same window

#+BEGIN_SRC emacs-lisp
  (setq Man-notify-method 'pushy)
#+END_SRC


** check org heading id consistency
:PROPERTIES:
:ID:       b18dd4cd-9cb9-4436-b5c0-9c4696b9865a
:END:

#+BEGIN_SRC emacs-lisp
  ;; (require 'org-id)
  ;; (setq org-id-link-to-org-use-id t)
  ;; (org-id-update-id-locations)
#+END_SRC


** automatically id new org headings
:PROPERTIES:
:ID:       389f5438-224d-4edc-b052-4f7ced9a159d
:END:

#+BEGIN_SRC emacs-lisp
  ;; (defun mau/org-insert-heading-hook ()
  ;;   (interactive)
  ;;   (org-id-get-create)
  ;;   (forward-char 1)
  ;;   (org-cycle)
  ;;   (backward-char 1))

  ;; (add-hook 'org-insert-heading-hook 'mau/org-insert-heading-hook)
  ;; (add-hook 'org-capture-before-finalize-hook 'mau/org-insert-heading-hook)
#+END_SRC


** epubs


#+BEGIN_SRC emacs-lisp :results silent 
  (add-hook 'nov-mode-hook
            (lambda ()
              (define-key nov-mode-map (kbd "<end>") 'move-end-of-line)
              (define-key nov-mode-map (kbd "<home>") 'move-beginning-of-line)
              ))
#+END_SRC


** org-ref

#+BEGIN_SRC emacs-lisp 
(setq org-ref-bibliography-notes "~/auricio/write/writing/bib/notes.org"
      org-ref-default-bibliography '("~/auricio/write/writing/bib/ref.bib")
      org-ref-pdf-directory "~/auricio/write/read/bib/")
#+END_SRC

#+RESULTS:
: ~/auricio/write/read/bib/

#+BEGIN_SRC emacs-lisp :results silent
;; Basic paths
(setq reftex-default-bibliography '("~/auricio/write/writing/bib/ref.bib"))
(setq org-ref-bibliography-notes "~/auricio/write/writing/bib/notes.org"
      org-ref-default-bibliography '("~/auricio/write/writing/bib/ref.bib")
      org-ref-pdf-directory "~/auricio/write/read/bib/")
;; Helm
(setq bibtex-completion-bibliography "~/auricio/write/writing/bib/ref.bib"
      bibtex-completion-library-path "~/auricio/write/writing/bib/ref.bib"
      bibtex-completion-notes-path "~/auricio/write/writing/bib/helm-bibtex-notes")
;; Open PDFs
(setq bibtex-completion-pdf-open-function 'org-open-file)
(require 'org-ref)
#+END_SRC


** org enhancements

#+BEGIN_SRC emacs-lisp 
(defun mau/date ()
  (interactive)
  (format-time-string "%d.%m.%Y")
  )
#+END_SRC


** org refile
:PROPERTIES:
:ID:       1d39c472-396a-4ee5-82c8-ebdb8e5678e3
:END:

#+BEGIN_SRC emacs-lisp
     ;; (setq org-refile-targets
     ;;     '(
     ;;      (org-agenda-files :maxlevel . 9)))
#+END_SRC


** html setup
:PROPERTIES:
:ID:       9af304f4-796a-463a-a760-ac0405e5142d
:END:

#+BEGIN_SRC emacs-lisp
  (defun setup-for-ac-html ()
    (require 'ac-html)
    (require 'ac-html-default-data-provider)
    (ac-html-enable-data-provider 'ac-html-default-data-provider)
    (ac-html-setup)
    (setq ac-sources '(ac-source-html-tag
                       ac-source-html-attr
                       ac-source-html-attrv))
    (auto-complete-mode))

  (add-hook 'html-mode-hook 'setup-for-ac-html)
#+END_SRC


** org export

#+BEGIN_SRC emacs-lisp :results silent
(require 'ox-tufte)
(setq-default org-export-preserve-breaks t)
(setq-default org-export-with-toc nil)
(setq-default org-export-with-title nil)
(setq-default org-export-with-author nil)
(setq-default org-export-time-stamp-file nil)
(setq-default org-export-with-title nil)
(setq-default org-export-with-section-numbers nil)
(setq-default org-html-validation-link nil)

(with-eval-after-load 'ox-latex
  (add-to-list 'org-latex-classes
               '("tuftebook"
                 "\\documentclass{tufte-book}\n
  \\usepackage{color}
  \\usepackage{amssymb}
  \\usepackage{gensymb}
  \\usepackage{nicefrac}
  \\usepackage{units}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC


** python
:PROPERTIES:
:ID:       78c06252-2655-431c-9633-cb04f2300838
:END:

#+BEGIN_SRC emacs-lisp
  (setq ein:use-auto-complete t)
  (setq-default indent-tabs-mode nil)
#+END_SRC


** js

#+BEGIN_SRC emacs-lisp :results silent
(defun move-line-up ()
  (interactive)
  (transpose-lines 1)
  (forward-line -2))

(defun move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (forward-line -1))

;; (define-key js2-mode-map (kbd "M-<up>") 'move-line-up)
;; (define-key js2-mode-map (kbd "M-<down>") 'move-line-down)
#+END_SRC


** yasnippet
:PROPERTIES:
:ID:       5e5563ce-fd71-4057-b12f-06b9447f2814
:END:

#+BEGIN_SRC emacs-lisp
  ;; (setq yas-snippet-dirs '("/home/m/.emacs.d/snippets/"))
  ;; (add-hook 'html-mode 'yas-minor-mode)
#+END_SRC


** simple transcript mode
:PROPERTIES:
:ID:       e5b66427-3a3d-4832-a62e-e0b6080dc580
:END:

#+BEGIN_SRC emacs-lisp 

(define-minor-mode m/transcript-mode "for transcripts"
  :lighter "Transcript"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "M-<left>") 'mau/rewind-mpd-seconds)
            (define-key map (kbd "M-<right>") 'mau/forward-mpd-seconds)
            (define-key map (kbd "M-<up>") 'mau/toggle-mpd)
            (define-key map (kbd "M-<down>") 'mau/insert-mpd-timestamp)
            (define-key map (kbd "C-c  RET") 'mau/goto-mpd-seconds)
            map)

  ;; (defun mau/insert-mpd-timestamp ()
  ;;   (interactive)
  ;;   (insert
  ;;    (concat "["
  ;;            (nth 0
  ;;                 (split-string
  ;;                  (shell-command-to-string "mpc | awk 'FNR == 2 {print $3}'") "/")
  ;;                 )
  ;;            )
  ;;    "] ")
  ;;   )

    (defun mau/insert-mpd-timestamp ()
    (interactive)
    (insert
     (concat "◊time{"
             (nth 0
                  (split-string
                   (shell-command-to-string "mpc | awk 'FNR == 2 {print $3}'") "/")
                  )
             )
     "}
")
    )

  (defun mau/rewind-mpd-seconds ()
    (interactive)
    (shell-command-to-string "mpc seek -2"))

  (defun mau/forward-mpd-seconds ()
    (interactive)
    (shell-command-to-string "mpc seek +2"))

  (defun mau/goto-mpd-seconds (n)
    (interactive "sseconds (- or +): ")
    (shell-command-to-string (concat "mpc seek " n)))

  (defun mau/toggle-mpd ()
    (interactive)
    (shell-command-to-string "mpc seek -1")
    (shell-command-to-string "mpc toggle"))

  )
#+END_SRC

** projectile

#+BEGIN_SRC emacs-lisp :results silent
  (projectile-mode)
  (require 'helm-projectile)
  (helm-projectile-on)
#+END_SRC


** pollen

#+BEGIN_SRC emacs-lisp 
(require 'pollen-mode)
(require 'company-pollen)
(add-hook 'pollen-mode-hook 'variable-pitch-mode)
#+END_SRC


** hi-lock

#+BEGIN_SRC emacs-lisp 
(global-hi-lock-mode)
(setq hi-lock-file-patterns-policy #'(lambda (dummy) t))
#+END_SRC






