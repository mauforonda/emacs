* Define

#+BEGIN_SRC emacs-lisp 
(deftheme personal
  "Personal Theme")
#+END_SRC  

* Variables

#+BEGIN_SRC emacs-lisp 
 (let* (
        (tufte-font "ETBembo")
        (code-font "Hack")
        (charter-font "Charter")
        (normal-font "DejaVu Sans")
        (abril-font "Abril Fatface")
        (background-color "#fdfcff")
        (background-color-2 "#FAF9FF")
        (current-line "#ebf7ff")
        (foreground-color "#8f9191")
        (textforeground "#6e677c")
        (title-color "#000611")
        (comment "#ffe0cf")
        (blue "#2196f3")
        (yellow "#ffa000")
        (red "#ce0e0e")
        (green "#2b9b54")
        (purple "#512689")
        (orange "#b7732f")
        (spell "#ff8ef9")
        (fui-turquoise "#1abc9c")
        (fui-emerald "#2ecc71")
        (fui-river "#3498db")
        (fui-amethyst "#9b59b6")
        (fui-deep-asphalt "#34495e")
        (fui-asphalt "#425d78")
        (fui-sunflower "#f1c40f")
        (fui-carrot "#e67e22")
        (fui-alizarin "#e74c3c")
        (fui-clouds "#ecf0f1")
        (fui-concrete "#95a5a6")
        (fui-dark-turquoise "#16a085")
        (fui-dark-emerald "#27ae60")
        (fui-dark-river "#2980b9")
        (fui-dark-amethyst "#8e44ad")
        (fui-dark-asphalt "#2c3e50")
        (fui-dark-sunflower "#f39c12")
        (fui-dark-carrot "#d35400")
        (fui-dark-alizarin "#c0392b")
        (fui-dark-clouds "#bdc3c7")
        (fui-deep-clouds "#dce0e1")
        (fui-dark-concrete "#7f8c8d")
        (fui-bg fui-clouds)
        (fui-fg fui-asphalt)
        )
#+END_SRC



* Faces

Associate faces to theme

#+BEGIN_SRC emacs-lisp 
(custom-theme-set-faces
 'personal
#+END_SRC

** Default

#+begin_src emacs-lisp
 `(default ((t (:foreground ,foreground-color :background ,background-color-2 :height 90 :weight normal :font ,normal-font))))
#+end_src

#+BEGIN_SRC emacs-lisp 
 `(bold ((t (:weight bold))))
 `(bold-italic ((t (:weight bold :slant italic))))
 `(underline ((t (:underline t))))
 `(italic ((t (:slant italic))))
 `(shadow ((t (:foreground ,comment))))
 `(success ((t (:foreground "SeaGreen2"))))
 `(error ((t (:weight bold :foreground ,red))))
 `(warning ((t (:foreground ,red))))
 `(button ((t (:foreground "#837599" :background "#eeeafc" :underline nil))))
#+END_SRC

** Font Lock

#+BEGIN_SRC emacs-lisp 
 `(font-lock-builtin-face ((t (:foreground "#8ec0cc"))))
 `(font-lock-constant-face ((t (:foreground "#ef99d2"))))
 `(font-lock-doc-face ((t (:foreground "#85818e"))))
 `(font-lock-function-name-face ((t (:foreground "#9054ea"))))
 `(font-lock-variable-name-face ((t (:foreground "#ef9bab"))))
 `(font-lock-keyword-face ((t (:foreground "#9d8db5"))))
 `(font-lock-negation-char-face ((t (:foreground ,blue))))
 `(font-lock-preprocessor-face ((t (:foreground ,yellow))))
 `(font-lock-regexp-grouping-backslash ((t (:foreground ,yellow))))
 `(font-lock-regexp-grouping-construct ((t (:foreground ,blue))))
 `(font-lock-string-face ((t (:foreground "#8dabdd"))))
 `(font-lock-type-face ((t (:foreground "#d7a2ef"))))
 `(font-lock-warning-face ((t (:foreground "#d13434"))))
 `(font-lock-comment-face ((t (:foreground "#83ccc0"))))
#+END_SRC

** Languages

racket

#+BEGIN_SRC emacs-lisp 
 `(racket-keyword-argument-face ((t (:foreground "#e8b78d"))))
#+END_SRC

javascript

#+BEGIN_SRC emacs-lisp 
 `(js2-external-variable ((t (:foreground "#e8af4e"))))
 `(js2-function-param ((t (:foreground "#8fa1ba"))))
#+END_SRC

** Window

*** Cursor
#+BEGIN_SRC emacs-lisp 
 `(cursor ((t (:background "#87767a"))))
#+END_SRC

*** Fringe

#+BEGIN_SRC emacs-lisp 
 `(fringe  ((t (:background ,background-color))))
 `(vertical-border ((t (:background "#ffffff" :foreground "#ffffff"))))
#+END_SRC

*** Highlight

#+BEGIN_SRC emacs-lisp 
 `(highlight ((t (:background ,current-line :inverse-video nil))))
 `(hl-line ((t (:background ,current-line :inverse-video nil))))
#+END_SRC

*** Mode Line

#+BEGIN_SRC emacs-lisp 
 `(mode-line ((t (:weight light :background "#ffffff" :foreground "#ffffff" :height 1 :box nil))))
 `(mode-line-buffer-id ((t (:foreground "#e8eaea" :background nil))))
 `(mode-line-inactive ((t (:inherit mode-line))))
 `(mode-line-emphasis ((t (:foreground ,foreground-color :slant italic))))
 `(mode-line-highlight ((t (:foreground ,blue :box nil))))
#+END_SRC

*** Minibuffer

#+BEGIN_SRC emacs-lisp 
 `(minibuffer-prompt  ((t  (:foreground "#572dc4" :font ,normal-font))))
#+END_SRC

*** Region

#+BEGIN_SRC emacs-lisp 
 `(region ((t (:background ,"#f1f0ff"))))
#+END_SRC


*** Secondary Selection

#+BEGIN_SRC emacs-lisp 
 `(secondary-selection ((t (:background "#cfc6ea" :foreground ,background-color))))
#+END_SRC


*** Header

#+BEGIN_SRC emacs-lisp 
 `(header-line ((t (:font ,charter-font :background "#f4f2fa" :foreground "#677174" :overline "#e3e1e8" :height 1.2 :box (:line-width 7 :color "#f4f2fa")))))
#+END_SRC


*** Trailing Whitespace

#+BEGIN_SRC emacs-lisp 
 `(trailing-whitespace ((t (:background "#c4aeae"))))
#+END_SRC


*** Helm

#+BEGIN_SRC emacs-lisp 
 `(helm-header ((t (:foreground "#706e73" :background "#ffffff" :box (:line-width 7 :color "#ffffff")))))
 `(helm-selection ((t (:background ,current-line))))
 `(helm-match ((t (:foreground "#6d7071" :bold t))))
 `(helm-ff-file ((t (:foreground "#aab7b5" ))))
 `(helm-ff-directory ((t (:foreground "#918f9b" :bold t))))
 `(helm-ff-executable ((t (:foreground "#c69bb1" ))))
 `(helm-grep-file ((t (:foreground "#b2a6ac" :underline t))))
 `(helm-candidate-number ((t (:foreground "#b2a6ac" :background "#fdfcff" ))))
 `(helm-candidate-number-suspended ((t (:foreground ,textforeground :background "#fdfcff"))))
 `(helm-source-header ((t (:font ,charter-font :background "#ffffff" :foreground "#706e73" :bold t :height 1.2 :box (:line-width 6 :color "#ffffff")))))
 `(helm-ff-dotted-directory ((t (:inherit helm-ff-file :foreground "#cee2df"))))
 `(helm-ff-dotted-symlink-directory ((t (:inherit helm-ff-file :foreground "#cee2df"))))
 `(helm-ff-invalid-symlink ((t (:inherit helm-ff-file :foreground "#ff8077"))))
 `(helm-ff-pipe ((t (:inherit helm-ff-file :foreground "#6d4d4b"))))
 `(helm-ff-prefix ((t (:inherit helm-ff-file :foreground "#eacd93"))))
 `(helm-ff-suid ((t (:inherit helm-ff-file :foreground "#6bea7a"))))
 `(helm-history-deleted ((t (:inherit helm-ff-invalid-symlink))))
 `(helm-M-x-key ((t (:foreground "#5bd8cc"))))
 `(helm-buffer-directory ((t (:foreground "#8083ba" ))))
 `(helm-buffer-file ((t (:foreground "#8fbab4" ))))
 `(helm-buffer-modified ((t (:foreground "#bc93c1"))))
 `(helm-buffer-not-saved ((t (:foreground "#c193a7"))))
#+END_SRC

*** Swbuff
#+BEGIN_SRC emacs-lisp 
 `(swbuff-current-buffer-face ((t (:weight normal :background "#e1e1e8" :underline nil :foreground nil :font ,normal-font :box (:line-width 2 :color "#e1e1e8")))))
 `(swbuff-default-face ((t (:weight light :background "#efeff4" :foreground nil :font ,normal-font :box (:line-width 2 :color "#efeff4")))))
 `(swbuff-separator-face ((t (:background "#f2f2f7" :foreground "#efeff4"))))
#+END_SRC

*** Search

#+BEGIN_SRC emacs-lisp 
 `(match ((t (:background "#ECEFF1" :foreground "#F1BBB4" :weight normal :inverse-video nil))))
 `(isearch ((t (:background "#ece8ed"))))
 `(isearch-lazy-highlight-face ((t (:foreground ,background-color :background ,green :inverse-video nil))))
 `(lazy-highlight-face ((t (:foreground ,background-color :background "#e5ab96" :inverse-video nil))))
 `(isearch-fail ((t (:background ,background-color :inherit font-lock-warning-face :inverse-video t))))
 `(ivy-current-match ((t (:background ,current-line))))
 `(ivy-minibuffer-match-face-2 ((t (:weight normal :background "#adffe3" :foreground "#894846"))))
 `(helm-grep-lineno ((t (:foreground ,purple))))
 `(helm-grep-match ((t (:foreground ,orange))))
 `(swiper-match-face-2 ((t (:background "#adffe3" :foreground "#894846"))))
#+END_SRC

*** Auto-dim

#+BEGIN_SRC emacs-lisp 
 `(auto-dim-other-buffers-face ((t (:background "#f6f6f6"))))
#+END_SRC

*** Flyspell

#+BEGIN_SRC emacs-lisp 
 `(flyspell-duplicate ((t (:underline (:color ,spell :style wave)))))
 `(flyspell-incorrect ((t (:underline (:color ,spell :style wave)))))
#+END_SRC

** Org

*** Format

**** Text

#+BEGIN_SRC emacs-lisp 
 `(variable-pitch ((t (:font ,charter-font :height 1.2 :foreground ,textforeground :weight normal))))
#+END_SRC


**** Inline Code

#+BEGIN_SRC emacs-lisp 
 `(org-code ((t (:height 0.9 :background "#efeef0" :foreground "#8b888b" :font "Dejavu Sans Mono"))))
 `(org-verbatim ((t (:font ,normal-font :height 0.9 :foreground "#919998" :background ,"#eaedec"))))
#+END_SRC


**** Ellipsis

#+BEGIN_SRC emacs-lisp 
 `(org-ellipsis ((t (:foreground ,comment))))
#+END_SRC


**** Footnote

#+BEGIN_SRC emacs-lisp 
 `(org-footnote ((t (:foreground ,purple))))
#+END_SRC


**** Hide

#+BEGIN_SRC emacs-lisp 
 `(org-hide ((t (:foreground ,background-color-2 :background ,background-color-2))))
#+END_SRC


**** Link

#+BEGIN_SRC emacs-lisp 
 `(org-link ((t (:foreground "#837599" :background "#eeeafc" :underline nil))))
#+END_SRC


**** Scheduling

#+BEGIN_SRC emacs-lisp 
 `(org-scheduled ((t (:foreground ,green))))
 `(org-scheduled-previously ((t (:foreground ,orange))))
 `(org-scheduled-today ((t (:foreground ,green))))
 `(org-upcoming-deadline ((t (:foreground ,orange))))
 `(org-warning ((t (:weight normal :foreground "#f9f9f9" :background "#ffc6ba"))))
#+END_SRC

**** Dates

#+BEGIN_SRC emacs-lisp 
 `(org-date ((t (:foreground ,"#80cbc4" :underline t))))
#+END_SRC

**** Columns

#+BEGIN_SRC emacs-lisp 
 `(org-column ((t (:background ,current-line))))
 `(org-column-title ((t (:inherit org-column :weight bold :underline t))))
#+END_SRC

**** Tags

#+BEGIN_SRC emacs-lisp 
 `(org-tag ((t (:weight light :font ,charter-font :background nil :foreground "#AEABC6" :height 1.0))))
#+END_SRC

**** Todo

#+BEGIN_SRC emacs-lisp 
 `(org-done ((t (:weight normal :background nil :foreground "#9095db"))))
 `(org-todo ((t (:background nil :weight normal :foreground "#ef9bc6"))))
#+END_SRC

*** Tree

#+BEGIN_SRC emacs-lisp 
 `(org-agenda-filter-tags ((t (:inherit org-tag :box (:line-width 5 :color ,background-color-2)))))
 `(org-level-1 ((t(:inherit nil :font ,charter-font :background nil :foreground "#484949" :weight normal :height 1.1))))
 `(org-level-2 ((t (:inherit org-level-1))))
 `(org-level-3 ((t (:inherit org-level-1 :height 0.9))))
 `(org-level-4 ((t (:inherit org-level-3))))
 `(org-level-5 ((t (:inherit org-level-3))))
 `(org-level-6 ((t (:inherit org-level-3))))
 `(org-level-7 ((t (:inherit org-level-3))))
 `(org-level-8 ((t (:inherit org-level-3))))
 `(org-level-9 ((t (:inherit org-level-3))))
#+END_SRC

*** Agenda
#+BEGIN_SRC emacs-lisp 
 `(org-agenda-structure ((t (:foreground "#c2c6c6"))))
 `(org-super-agenda-header ((t (:font ,charter-font :background "#f9f9f9" :foreground "#474343" :height 0.9 :box (:line-width 6 :color "#f9f9f9")))))
 `(org-agenda-date ((t (:foreground ,blue :underline nil))))
 `(org-agenda-done ((t (:foreground ,green))))
 `(org-agenda-dimmed-todo-face ((t (:foreground ,comment))))
#+END_SRC

*** Blocks

#+BEGIN_SRC emacs-lisp 
 `(org-block ((t :font ,code-font :weight light :foreground "#8f9191" :background "#F5F4FB")))
 `(org-block-background ((t :font ,code-font)))
 `(org-block-begin-line ((t (:inherit default :foreground "#bdc2c2" :weight light :box nil))))
 `(org-block-end-line ((t (:inherit org-block-begin-line))))
 `(org-quote ((t (:font ,charter-font :weight normal :slant italic :foreground "#695c89" :background ,"#f7f3ff" :box (:line-width 1 :color "#f7f3ff")))))
#+END_SRC

*** Tables

#+BEGIN_SRC emacs-lisp 
 `(org-table ((t (:height 0.8 :background "#efeef0" :foreground "#8b888b" :font "Dejavu Sans Mono"))))
 `(org-formula ((t (:foreground "#25196b" :height 0.8 :background "#efeef0" :font "Dejavu Sans Mono"))))
#+END_SRC

*** Document Metadata

#+BEGIN_SRC emacs-lisp 
 `(org-document-info ((t (:foreground ,title-color :font ,abril-font :weight normal :height 1.2))))
 `(org-document-info-keyword ((t (:font ,charter-font :height 90 :foreground "#b2b0b0" :weight normal))))
 `(org-document-title ((t (:inherit org-document-info :height 1.8))))
 `(org-meta-line ((t (:foreground ,"#b2b0b0" :background nil))))
#+END_SRC

** Others

*** Dired

#+BEGIN_SRC emacs-lisp 
`(all-the-icons-dired-dir-face ((t (:foreground "#c2c6c6"))))
`(dired-ignored ((t (:foreground "#d8d8d8"))))
#+END_SRC

*** Nerdtab

#+BEGIN_SRC emacs-lisp 
`(nerdtab-current-tab-face ((t (:background "#c4f4e5" :foreground "#99999b" :box (:line-width 3 :color "#c4f4e5")))))
`(nerdtab-tab-mouse-face ((t (:inherit nerdtab-current-tab-face))))
`(nerdtab-tab-face ((t (:foreground "#99999b" :box (:line-width 3 :color "#ededf1")))))
`(nerdtab-special-tab-face ((t (:foreground "#c8c8cc" :box (:line-width 3 :color "#ededf1") ))))
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp 
`(rainbow-delimiters-depth-1-face ((t (:foreground ,fui-fg))))
`(rainbow-delimiters-depth-2-face ((t (:foreground ,fui-turquoise))))
`(rainbow-delimiters-depth-3-face ((t (:foreground ,fui-dark-river))))
`(rainbow-delimiters-depth-4-face ((t (:foreground ,fui-dark-amethyst))))
`(rainbow-delimiters-depth-5-face ((t (:foreground ,fui-dark-sunflower))))
`(rainbow-delimiters-depth-6-face ((t (:foreground ,fui-dark-emerald))))
`(rainbow-delimiters-depth-7-face ((t (:foreground ,fui-dark-concrete))))
`(rainbow-delimiters-unmatched-face ((t (:foreground ,fui-alizarin))))
#+END_SRC

*** Linum

#+BEGIN_SRC emacs-lisp 
 `(linum ((t (:foreground ,"#d1d1d1" :height 0.8))))
#+END_SRC

*** Compilation

#+BEGIN_SRC emacs-lisp 
 `(compilation-column-number ((t (:foreground ,yellow))))
 `(compilation-line-number ((t (:foreground ,yellow))))
 `(compilation-message-face ((t (:foreground ,blue))))
 `(compilation-mode-line-exit ((t (:foreground ,green))))
 `(compilation-mode-line-fail ((t (:foreground ,red))))
 `(compilation-mode-line-run ((t (:foreground ,blue))))
#+END_SRC

*** Markdown

#+BEGIN_SRC  emacs-lisp
 `(markdown-header-face ((t (:inherit org-level-1))))
 `(markdown-header-face-1 ((t (:inherit org-level-1))))
 `(markdown-header-face-2 ((t (:inherit org-level-2))))
 `(markdown-header-face-3 ((t (:inherit org-level-3))))
 `(markdown-header-face-4 ((t (:inherit org-level-4))))
 `(markdown-header-face-5 ((t (:inherit org-level-5))))
 `(markdown-header-face-6 ((t (:inherit org-level-6))))
 `(markdown-inline-code-face ((t (:inherit org-verbatim))))
 `(markdown-markup-face ((t (:inherit org-meta-line))))
 `(markdown-blockquote-face ((t (:inherit org-meta-line))))
#+END_SRC

** End

#+BEGIN_SRC emacs-lisp 
  ))
#+END_SRC

* Provide

#+BEGIN_SRC emacs-lisp 
(provide-theme 'personal)
#+END_SRC

